package pkgFill_ESA_TimeSheet;

import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.util.Date;
import java.util.List;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.ObjectUtils.Null;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

public class clsUtility_Functions extends clsFill_ESA_TimeSheet {
	/*
	 * public static WebDriver driver; public static String Working_Dir =
	 * System.getProperty("user.dir"); public static String Chrome_Driver_Path =
	 * "D:\\Development_Avecto\\chromedriver.exe"; public static String ESA_URL =
	 * "https://onecognizant.cognizant.com";
	 * 
	 * ####### Entering the values from accelerator ####### Entering the values from
	 * accelerator ####### Entering the values from accelerator public static
	 * WebDriverWait wait15; public static WebDriverWait wait30; public static
	 * WebDriverWait wait45; public static WebDriverWait wait60; public static
	 * ObjectMap objmap; public static BufferedWriter BW; public static String
	 * Property_Path; public static boolean ExecutionStatus; public static boolean
	 * Page_Logo_Displayed;
	 * 
	 * public static String Prent_WNDID; public static FluentWait<WebDriver> wait31;
	 * public static String FileName; public static Alert Unexpected_Alert;
	 */
	/*
	 * public static File Ab_File1; public static String Parent_Dir; public static
	 * String Input_File_Path; public static String Result_Folder_Path; public
	 * static String Download_Path;
	 */
	/* Utility Functions *//* Utility Functions *//* Utility Functions *//* Utility Functions *//* Utility Functions *//*
																														 * Utility
																														 * Functions
																														 *//*
																															 * Utility
																															 * Functions
																															 */
	/*
	 * public static String GetValueFromExcel(String SheetName, int col, int row)
	 * throws InterruptedException { String Ret_Value =null; int Wait_Limit=0; while
	 * ((Ret_Value == "" || Ret_Value == null) && Wait_Limit<4) { Object WB; Cell
	 * cell = WB.getSheet(SheetName).getCell(col,row); if (cell != null) { Ret_Value
	 * = WB.getSheet(SheetName).getCell(col,row).getContents().trim(); } if
	 * (Ret_Value == null) { Thread.sleep(1000); } Wait_Limit = Wait_Limit+1; }
	 * return Ret_Value; }
	 */
	/*
	 * public static String Read_Excel(int Sheet_no, int col, int row) throws
	 * InterruptedException { String Ret_Value =null; int Wait_Limit=0; if
	 * (Sheet_no==1) { while (Ret_Value == null && Wait_Limit<4) {
	 * Thread.sleep(1000); Object ESA_Input_Sheet;
	 * Ret_Value=ESA_Input_Sheet.getCell(col,row).getContents().trim();
	 * Wait_Limit=Wait_Limit+1; } } else if(Sheet_no==2) { while (Ret_Value==null &&
	 * Wait_Limit<4) { Thread.sleep(1000); Object ESA_Input_Sheet2;
	 * Ret_Value=ESA_Input_Sheet2.getCell(col,row).getContents().trim();
	 * Wait_Limit=Wait_Limit+1; } } return Ret_Value; }
	 */
//##########################################                                     Utility                                                    ##########################
	public static void SwitchTo_Frame(String Name) {
		
		driver.switchTo().frame(Name);
	}
//##########################################                                     Utility                                                    ##########################
	public static void Wait_For_Element(String ObjectMapName) throws Exception {
		wait30.until(ExpectedConditions.presenceOfElementLocated(ObjectMap.getLocator(ObjectMapName)));
		System.out.println(";Waiting For Element:"+ObjectMapName);
	}

//##########################################                                     Utility                                                    ##########################
	public static void Wait_For_Element_Wo(String ObjectMapName) throws Exception {
		do {
			Thread.sleep(1000);
		} while (Stepped_Copay_WaitTill_TabActive(ObjectMapName) == false);
	}

//##########################################                                     Utility                                                    ##########################
//##########################################                                     Utility                                                    ##########################
	public static boolean Stepped_Copay_WaitTill_TabActive(String Obj_Prop) throws Exception {
		String Class_Val;
		Class_Val = driver.findElement(ObjectMap.getLocator(Obj_Prop)).getAttribute("class");
		if (Class_Val.contains("selected")) {
			ExecutionStatus = true;
		} else {
			ExecutionStatus = false;
		}
		return ExecutionStatus;
	}

//##########################################  
//##########################################                                     Utility                                                    ##########################
	public static void IsDisplayed(String ObjectMapName) throws Exception {
		Thread.sleep(1000);
		wait30.until(ExpectedConditions.presenceOfElementLocated(ObjectMap.getLocator(ObjectMapName)));
		// System.out.println(";Waiting For Element:"+ObjectMapName);
	}

//##########################################                                     Utility                                                    ##########################
	public static boolean IsDisplayed_Wo(String ObjectMapName) throws Exception {
		wait30.until(ExpectedConditions.presenceOfElementLocated(ObjectMap.getLocator(ObjectMapName)));
		// System.out.println(";Waiting For Element:"+ObjectMapName);
		return true;
	}

//##########################################                                     Utility                                                    ##########################
	public static boolean IsElementDisplayed(String ObjectMapName) throws Exception {
		WebElement element = driver.findElement(ObjectMap.getLocator(ObjectMapName));
		boolean DisplayedStatus;
		Thread.sleep(1000);
		wait30.until(ExpectedConditions.presenceOfElementLocated(ObjectMap.getLocator(ObjectMapName)));
		if (element.isDisplayed()) {
			// System.out.println(";"+ObjectMapName+" is displayed ");
			DisplayedStatus = true;
		} else {
			DisplayedStatus = false;
		}
		return DisplayedStatus;
	}

//##########################################                                     Utility                                                    ##########################
	public static String fn_GetTimeStamp() {
		DateFormat DF = DateFormat.getDateTimeInstance();
		Date dte = new Date();
		String DateValue = DF.format(dte);
		DateValue = DateValue.replaceAll(":", "_");
		DateValue = DateValue.replaceAll(",", "");
		return DateValue;
	}

	// ########################################## Utility ##########################
	public static void RadioButton_IsSelected(String ObjectMapName) throws Exception {
		WebElement RadioButtonTarget = driver.findElement(ObjectMap.getLocator(ObjectMapName));
		if (RadioButtonTarget.isDisplayed()) {
			RadioButtonTarget.click();
			if (RadioButtonTarget.isSelected()) {
				// System.out.println(";"+ObjectMapName+"Radio Button Is Selected");
			} else {
				JavascriptExecutorClick(ObjectMapName);
				// System.out.println(";"+ObjectMapName+"Radio Button Is Selected For The Second
				// Time");
			}
		}
	}

	// ########################################## Utility ##########################
	public static void SelectDesiredLI(String UL_ClassName, String Li_ClassName, String AttributeText)
			throws Exception {
		List<WebElement> listOfLiElements = driver.findElement(By.className(UL_ClassName))
				.findElements(By.className(Li_ClassName));
		for (WebElement li : listOfLiElements) {
			String text = li.getText();
			if (text.equals(AttributeText)) {
				li.click();
				Thread.sleep(3000);
				break;
			}
		}
	}

//##########################################                                     Utility                                                    ##########################
	public static void WaitTillTabColorChange(String ObjectMapName, String ColorText, String ExpectedColorText)
			throws Exception {
		String Bg_Color = ColorText;
		boolean color_changed;
		color_changed = false;
		do {
			Bg_Color = getCssValueColor(ObjectMapName);
			Thread.sleep(1000);
			color_changed = Bg_Color.contains(ExpectedColorText);
		} while (color_changed == false);
	}

	// ########################################## Utility ##########################
	public static String getCssValueColor(String ObjectMapName) throws Exception {
		String Bg_Color = driver.findElement(ObjectMap.getLocator(ObjectMapName)).getCssValue("background-image"); // background
		return Bg_Color;
	}

//##########################################                                     Utility                                                    ##########################
	public static WebElement isElementPresentW2(String ObjectMapName) throws Exception {
		WebElement ele = null;
		for (int i = 0; i < 10; i++) {
			try {
				ele = driver.findElement(ObjectMap.getLocator(ObjectMapName));
				break;
			} catch (Exception e) {
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e1) {
					// System.out.println(";Waiting for element:"+ObjectMapName+" to appear on
					// DOM");
				}
			}
		}
		return ele;
	}

//##########################################                                     Utility                                                    ##########################
	public static WebElement isElementPresentW(String ObjectMapName) throws Exception {
		WebElement ele = null;
		for (int i = 0; i < 10; i++) {
			try {
				ele = driver.findElement(ObjectMap.getLocator(ObjectMapName));
				break;
			} catch (Exception e) {
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e1) {
					// System.out.println(";Waiting for element:"+ObjectMapName+" to appear on
					// DOM");
				}
			}
		}
		return ele;
	}

//##########################################                                     Utility                                                    ##########################
	public static WebElement isElementPresent(String ObjectMapName, int time) throws Exception {
		WebElement ele = null;
		for (int i = 0; i < time; i++) {
			try {
				ele = driver.findElement(ObjectMap.getLocator(ObjectMapName));
				break;
			} catch (Exception e) {
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e1) {
					// System.out.println(";Waiting for element:"+ObjectMapName+" to appear on
					// DOM");
				}
			}
		}
		return ele;
	}

//##########################################                                     Utility                                                    ##########################
	public static void ActionsDriverClick(String ObjectMapName) throws Exception {
		WebElement element = driver.findElement(ObjectMap.getLocator(ObjectMapName));
		Wait_For_Element(ObjectMapName);
		/* driver.switchTo().window(Prent_WNDID); */
		if (element.isDisplayed()) {
			new Actions(driver).moveToElement(element).click().build().perform();
			// System.out.println(";"+ObjectMapName+" is clicked with ActionsDriverClick");
		}
	}
//##########################################                                     Utility                                                    ##########################

	public static void SelectByVisibleText(String ObjectMapName, String IP_Value) throws Exception {
		WebElement element = driver.findElement(ObjectMap.getLocator(ObjectMapName));
		if (IP_Value.isEmpty()) {
			// System.out.println(";The value is :Empty");
		} else {
			wait31.until(ExpectedConditions.presenceOfElementLocated(ObjectMap.getLocator(ObjectMapName)));
			if (element.isDisplayed()) {
				Select Drop_Down_1 = new Select(element);
				Drop_Down_1.selectByVisibleText(IP_Value);
				// System.out.println(";"+ObjectMapName+" is selected with value:"+IP_Value);
			} else {
				// System.out.println(";"+ObjectMapName+" is not displayed");
			}
		}
	}
//##########################################                                     Utility                                                    ##########################

	public static void SelectByVisibleText_Wo(String ObjectMapName, String Text) throws Exception {
		Select Drop_Down_1 = new Select(driver.findElement(ObjectMap.getLocator(ObjectMapName)));
		Drop_Down_1.selectByVisibleText(Text);
		// System.out.println(";"+ObjectMapName+" is selected with value:"+Text);
	}

//##########################################                                     Utility                                                    ##########################
	public static void Take_A_Screenshot(String ModuleName) {
// Take screenshot and store as a file format
		File src = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
		try {
			// now copy the screenshot to desired location using copyFile //method
			FileUtils.copyFile(src, new File(FileName + ModuleName + ".jpg"));
			// System.out.println(";Taken a Screenshot @ Method :"+ModuleName+".jpg");
		} catch (IOException e) {
			// System.out.println(e.getMessage());
		}
	}

//##########################################                                     Utility                                                    ##########################
	public static void JavascriptExecutorClick_Wo(String ObjectMapName) throws Exception {
		WebElement element = driver.findElement(ObjectMap.getLocator(ObjectMapName));
		JavascriptExecutor executor = (JavascriptExecutor) driver;
		executor.executeScript("arguments[0].click();", element);
		// Thread.sleep(500);
		// System.out.println(";"+ObjectMapName+" is clicked with JS Wo");
	}

//##########################################                                     Utility                                                    ##########################
	public static void JavascriptExecutorClick(String ObjectMapName) throws Exception {
		WebElement element = driver.findElement(ObjectMap.getLocator(ObjectMapName));
		Wait_For_Element(ObjectMapName);
		if (element.isDisplayed()) {
			JavascriptExecutor executor = (JavascriptExecutor) driver;
			executor.executeScript("arguments[0].click();", element);
			Thread.sleep(500);
			/* System.out.println(";"+ObjectMapName+" is clicked with JS"); */
		}
	}

//##########################################                                     Utility                                                    ##########################
	public static void JavascriptExecutorClick_ByText(String linkText) throws Exception {
		WebElement element = driver.findElement(By.linkText(linkText));
		wait30.until(ExpectedConditions.presenceOfElementLocated(By.linkText(linkText)));
		if (element.isDisplayed()) {
			JavascriptExecutor executor = (JavascriptExecutor) driver;
			executor.executeScript("arguments[0].click();", element);
			Thread.sleep(500);
			// System.out.println(";"+linkText+" is clicked with JS");
		}
	}

//##########################################                                     Utility                                                    ##########################
	public static void Clear_Object(String ObjectMapName) throws Exception {
		WebElement element = driver.findElement(ObjectMap.getLocator(ObjectMapName));
		Wait_For_Element(ObjectMapName);
		if (element.isDisplayed()) {
			element.clear();
			if (element.getAttribute("value").isEmpty()) {
				// System.out.println(";"+ObjectMapName+" is cleared");
			}
		}
	}

//##########################################                                     Utility                                                    ##########################
	public static void Clear_Object_Wo(String ObjectMapName) throws Exception {
		WebElement element = driver.findElement(ObjectMap.getLocator(ObjectMapName));
		if (element.isDisplayed()) {
			element.clear();
			if (element.getAttribute("value").isEmpty()) {
				// System.out.println(";"+ObjectMapName+" is cleared");
			}
		}
	}

//##########################################                                     Utility                                                    ##########################
	public static void SendKeys_TO_Object(String ObjectMapName, String IP_Value) throws Exception {
		WebElement element = driver.findElement(ObjectMap.getLocator(ObjectMapName));
		if (IP_Value.isEmpty()) {
			// System.out.println(";The value is :Empty");
		} else {
			Wait_For_Element(ObjectMapName);
			if (element.isDisplayed()) {
				Clear_Object_Wo(ObjectMapName);
				element.sendKeys(IP_Value);
				// System.out.println(";"+ObjectMapName+" is entered with the value:
				// "+IP_Value+" using SendKeys_TO_Object");
			}
		}
	}

	// ########################################## Utility ##########################
	public static void SendKeys_TO_Object_Wo(String ObjectMapName, String IP_Value) throws Exception {
		WebElement element = driver.findElement(ObjectMap.getLocator(ObjectMapName));
		if (IP_Value.isEmpty()) {
			// System.out.println(";The value is :Empty");
		} else {
			Clear_Object_Wo(ObjectMapName);
			element.sendKeys(IP_Value);
			// System.out.println(";"+ObjectMapName+" is entered with the value:
			// "+IP_Value+" using SendKeys_TO_Object_Wo");
		}
	}

	// ########################################## Utility ##########################
	public static void SendKeys_TO_Object_WoClr(String ObjectMapName, String IP_Value) throws Exception {
		driver.findElement(ObjectMap.getLocator(ObjectMapName)).sendKeys(IP_Value);
	}
	//##########################################                                     Utility                                                    ##########################                
	public static String GetTextFrom_Element(String ObjectMapName) throws Exception 
{
	String TextFrom_Element = null;
	WebElement we3= driver.findElement(ObjectMap.getLocator(ObjectMapName));
	Thread.sleep(1000);
	TextFrom_Element = we3.getText();	  
	return TextFrom_Element;
}
	public static void EnterValue_Element(String ObjectMapName, String IP_Value) throws Exception
	{
		String Value_Element=null;
		try
		{
			Value_Element = clsUtility_Functions.GetTextFrom_Element(ObjectMapName);
			if(!Value_Element.equalsIgnoreCase(IP_Value)) 
			{
				clsUtility_Functions.SendKeys_TO_Object(ObjectMapName,IP_Value);  
			}
		}
		catch(Exception eValue_Element)
		{                                                              		 
				clsUtility_Functions.SendKeys_TO_Object(ObjectMapName,IP_Value);  
				System.out.println("Value of the_Element" + eValue_Element);
		}
	}  
	// ########################################## Utility ##########################
	public static void Click_Object(String ObjectMapName) throws Exception {
		WebElement element = driver.findElement(ObjectMap.getLocator(ObjectMapName));
		Wait_For_Element(ObjectMapName);
		if (element.isDisplayed()) {
			element.click();
			// System.out.println(";"+ObjectMapName+" is clicked");
		}
	}

	// ########################################## Utility ##########################
	public static void Click_ObjectWo(String ObjectMapName) throws Exception {
		WebElement element = driver.findElement(ObjectMap.getLocator(ObjectMapName));
		if (element.isDisplayed()) {
			element.click();
			// System.out.println(";"+ObjectMapName+" is clicked");
		}
	}

//##########################################                                     Utility                                                    ##########################
	public static void WaitForObject(String ObjectMapName) throws Exception {
		WebDriverWait wait2 = new WebDriverWait(driver, 200);
		WebElement we1 = wait2
				.until(ExpectedConditions.visibilityOfElementLocated(ObjectMap.getLocator(ObjectMapName))); // ContentPlaceHolder1_lgnDrugcopay
	}

//##########################################                                     Utility                                                    ##########################                
	public static void Refresh_Page() throws Exception {
		try {
			Page_Logo_Displayed = driver.findElement(By.xpath("//img[@src='/Images/benefitServLogo.jpg']"))
					.isDisplayed();
		} catch (Exception BalnkExcp) {
			driver.navigate().refresh();
			Thread.sleep(3000);
			Close_Unexpected_Alert();
			wait30.until(
					ExpectedConditions.presenceOfElementLocated(By.xpath("//img[@src='/Images/benefitServLogo.jpg']")));
			Close_Unexpected_Alert();
		}
	}

	// ########################################## Utility ##########################
	public static void Close_Unexpected_Alert() {
		try {
			Unexpected_Alert = driver.switchTo().alert();
			Unexpected_Alert.accept();
			Thread.sleep(1000);
		} catch (Exception UN_Ex_A) {
			// System.out.println(UN_Ex_A);
		}
	}

	// ########################################## Utility ##########################
	public static void WriteLog(String Msg) throws IOException {
		BW.write(Msg);
		BW.newLine();
	}

	// ########################################## Utility ##########################
	public static void Create_File_Path() {
		Working_Dir = System.getProperty("user.dir");
		// System.out.println("Working_Dir: " + Working_Dir );
		Ab_File1 = new File(Working_Dir);
		Parent_Dir = Ab_File1.getParent();
		// System.out.println(Parent_Dir);

		Input_File_Path = Parent_Dir + "\\Input Files\\InputFile.xls";
		// System.out.println(Input_File_Path);

		Result_Folder_Path = Parent_Dir + "\\Results";
		// System.out.println(Result_Folder_Path);

		Download_Path = "C:\\Users\\" + System.getProperty("user.name") + "\\Downloads";
		// System.out.println(Download_Path);
	}

//##########################################                                     Utility                                                    ##########################                
	public static void Create_Chrome_Driver() {
		System.setProperty("webdriver.chrome.driver", Chrome_Driver_Path);
		driver = new ChromeDriver();
		wait15 = new WebDriverWait(driver, 15);
		wait30 = new WebDriverWait(driver, 30);

	}
//##########################################                                     Utility                                                    ##########################                
	public static void Launch_One_Cognizant() {
		driver.navigate();
		driver.get(ESA_URL);
		//driver.manage().window().maximize();
	}
//
	
	

	/*
	 * List iconSubmit_TimeSheet_List = driver.findElements(By.xpath(
	 * "//*[@id='desktopsearchresult']/ul/li[1]/div[1]/img|//img[contains(@src,'31_small.png')]"
	 * )); int sizeiconSubmit_TimeSheet_List = iconSubmit_TimeSheet_List.size(); if
	 * (sizeiconSubmit_TimeSheet_List > 0) {
	 * System.out.println("sizeiconSubmit_TimeSheet_List" +
	 * sizeiconSubmit_TimeSheet_List); } WebElement
	 * iconSubmit_TimeSheet_Contains_https =driver.findElement(By.xpath(
	 * "//*[@id='desktopsearchresult']/ul/li[1]/div[1]/img|//img[contains(@src,'31_small.png')]"
	 * )); iconSubmit_TimeSheet_Contains_https.click();
	 */
}


